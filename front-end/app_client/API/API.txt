APP's API:

================================================================== USER FUNCTIONS =================================================

  static Future<int> sendFormRegistration(user, name, surname, email, pw, faculty, university) async
	
	USAGE:
		create a new user with username, name, surname, email, password, faculty and university
		
	METHOD:
		POST /userReg
	
	RETURN: 
    	1 if the user is correctly added to the Db
    	-1 if the user is already in the Db
    	-2 if there's an internal error
    	throws an exception otherwise

##################################################################
	
  static Future<int> validateLogin(String user, String pw, String flag) async
	
	USAGE:
		verify the existence of an account with username and password.
		The value of flag must be "0" (user is login in with username) or "1" (user is login in with email) 
	
	METHOD:
		POST /userLog
	
	RETURN:
    	1 if the user is in the Db and the password is correct
    	-1 invalid login
    	-2 if there's an internal error
    	throws an exception otherwise
	
##################################################################

  static Future<User> getMyUserById(userId) async
  	
  	USAGE:
		retrieve my own profile, with privacy information
  
  	METHOD:
  		GET /user 
  	
  	RETURN:
  		User instance without password
  
##################################################################

  static Future<User> getOtherUserById(userId) async 
  	
  	USAGE:
  		retrieve other users' profiles, without privacy information
  		
  	METHOD:
  		GET /user
  	
  	RETURN:
  		User instance without password, email


================================================================== DOCUMENT FUNCTIONS =================================================

  static Future<int> uploadDocument(String title, String path) async
	
	USAGE:
		upload a document selected from a path with a given title
	
  	METHOD:
  		POST /document
  	
  	RETURN:
    	1 if the document is succesfully uploaded
    	-1 if there's a bad input parameter
    	-2 if there's an internal error
    	throws an exception otherwise
	
##################################################################

  static Future<Uint8List> getDocumentById(docId) async
  	
  	USAGE:
  		retrieve the content (a stream of bytes) of an existing document 
  
  	METHOD:
  		GET /document 
  	
  	RETURN:
  		Uint8List containing the stream of bytes sent by the server
  
##################################################################

  static Future<List<dynamic>> search(String query, String typeFlag) async
  	
  	USAGE:
  		Retrieve a list of documents/users fitting the query.
  		The value of typeFlag must be "0" (searching for documents) or "1" (searching for users) 
  		
  	METHOD:
  		GET /document
  	
  	RETURN:
  		A List of Document instances with title, owner and uuid
	
	


================================================================== LIKE FUNCTIONS =================================================

  static Future addLike(user, docId) async
  	
	USAGE:
		add +1 to the likes of a document with id "docId"

	METHOD:
		POST /like 

	RETURN:
		TODO

#############################################################################################

  static Future retrieveLikes(docId) async
  	
  	USAGE:
  		retrieve the number of likes of a document with id "docId"
  		
  	METHOD:
  		GET /like
  	
  	RETURN:
  		TODO


================================================================== MASHUP FUNCTIONS =================================================

  static Future<dynamic> mashup(List<String> pageIds) async 
  	
  	USAGE:
  		create a new mashup given a list of page Ids
  		
  	METHOD:
  		POST /mashup 
  	
  	RETURN:
  		TODO

=====================================================================================================================================

Il codice delle funzioni si trova nella cartella front-end/app_clinet/univer_city_app_0_4/lib/http_handling/http_handler.dart

